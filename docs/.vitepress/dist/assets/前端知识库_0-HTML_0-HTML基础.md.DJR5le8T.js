import{_ as i,c as t,o as l,aS as e}from"./chunks/framework.CYhLyFt1.js";const E=JSON.parse('{"title":"HTML基础","description":"","frontmatter":{},"headers":[],"relativePath":"前端知识库/0-HTML/0-HTML基础.md","filePath":"前端知识库/0-HTML/0-HTML基础.md","lastUpdated":1712717365000}'),o={name:"前端知识库/0-HTML/0-HTML基础.md"},s=e(`<h1 id="html基础" tabindex="-1">HTML基础 <a class="header-anchor" href="#html基础" aria-label="Permalink to &quot;HTML基础&quot;">​</a></h1><h2 id="html语义化" tabindex="-1">HTML语义化 <a class="header-anchor" href="#html语义化" aria-label="Permalink to &quot;HTML语义化&quot;">​</a></h2><p>语义化可以总结为 根据内容选择标签，用最恰当的标签来标记内容。 例如网页中的标题使用 <code>&lt;h1&gt;~&lt;h6&gt;</code>这样的标签，而不是使用 <code>&lt;div&gt;+css</code>。</p><p><strong>语义化好处</strong></p><ul><li>使HTML结构变得清晰，有利于维护代码和添加样式。</li><li>通常语义化HTML会使代码变的更少，使页面加载更快。</li><li>即使在没有CSS样式的条件下，也能很好地呈现出内容结构、代码结构。</li><li>便于团队开发和维护，语义化更具可读性，遵循 <code>W3C</code>标准，可以减少差异化。</li><li>方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页。</li><li>提升搜索引擎优化(SEO)的效果。和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息，爬虫可以依赖于标签来确定上下文和各个关键字的权重。</li></ul><p><strong>注意语义化编写</strong></p><ul><li>尽可能少的使用无语义的标签 <code>&lt;div&gt;</code>和 <code>&lt;span&gt;</code>。</li><li>不要使用纯样式标签，如 <code>&lt;b&gt;</code>是纯样式标签，而 <code>&lt;strong&gt;</code>的语义为加粗。</li><li>在 <code>&lt;lable&gt;</code>标签中设置 <code>for</code>来让说明文本和相对应的 <code>&lt;input&gt;</code>关联起来。</li><li>表单域要用 <code>&lt;fieldset&gt;</code>标签包起来，并用 <code>&lt;legend&gt;</code>标签说明表单的用途。</li><li>需要强调的文本，可以包含在strong或者em标签中，<code>&lt;strong&gt;</code>默认样式是加粗，<code>&lt;em&gt;</code>是斜体。</li><li>使用表格时，标题要用 <code>&lt;caption&gt;</code>，表头用 <code>&lt;thead&gt;</code>，主体部分用 <code>&lt;tbody&gt;</code>包围，尾部用 <code>&lt;tfoot&gt;</code>包围。表头和一般单元格要区分开，表头用 <code>&lt;th&gt;</code>，单元格用 <code>&lt;td&gt;</code>。</li></ul><p><strong>常用语义化标签</strong></p><ul><li><code>&lt;h1&gt;~&lt;h6&gt;</code> 定义页面的标题，<code>&lt;h1&gt;-&lt;h6&gt;</code>元素等级依次降低。</li><li><code>&lt;header&gt;</code> 页眉通常包括网站标志、主导航、全站链接以及搜索框。</li><li><code>&lt;nav&gt;</code> 提供当前文档内或其他文档的导航链接，导航部分的常见示例是菜单，目录和索引。</li><li><code>&lt;main&gt;</code> 主要内容区域由与文档的中心主题或应用程序的中心功能直接相关或扩展的内容组成。</li><li><code>&lt;article&gt;</code> 专注于单个主题的博客文章，报纸文章或网页文章。</li><li><code>&lt;address&gt;</code> 提供了一个或多个人员或组织的联系信息。</li><li><code>&lt;section&gt;</code> 定义文档中的节，表示 <code>HTML</code>文档中包含的独立部分。</li><li><code>&lt;aside&gt;</code> 表示文档的一部分，其内容仅与文档的主要内容间接相关,通常显示为侧边栏。</li><li><code>&lt;footer&gt;</code> 定义文档的底部区域，通常包含文档的作者，著作权信息，联系信息等。</li><li><code>&lt;hgroup&gt;</code> 表示文档部分的多级标题，它对一组 <code>&lt;h1&gt;~&lt;h6&gt;</code>元素进行分组。</li><li><code>&lt;ul&gt;</code> 表示项目的无序列表，通常呈现为项目符号列表。</li><li><code>&lt;ol&gt;</code> 表示项目的有序列表，通常呈现为编号列表。</li><li><code>&lt;li&gt;</code> 表示列表中的项目。</li><li><code>&lt;strong&gt;</code> 表示强调突出重点内容，浏览器通常以粗体显示内容。</li><li><code>&lt;em&gt;</code> 标记强调重点的文本，可以嵌套 <code>&lt;em&gt;</code>元素，嵌套的每个级别都表示强调程度更高。</li><li><code>&lt;small&gt;</code> 代表旁注和小字体，例如版权和法律文本，独立于其样式表示。</li><li><code>&lt;abbr&gt;</code> 表示缩写或首字母缩写词。</li><li><code>&lt;cite&gt;</code> 用于描述对引用的创意作品的引用，并且必须包括该作品的标题。</li><li><code>&lt;figure&gt;</code> 表示独立的内容，可能带有可选的标题，该标题使用 <code>&lt;figcaption&gt;</code>元素指定。</li><li><code>&lt;figcaption&gt;</code> 表示说明其父 <code>&lt;figure&gt;</code>元素的其余内容的标题或图例。</li><li><code>&lt;blockquote&gt;</code> 定义块引用，可以使用 <code>&lt;cite&gt;</code>元素提供文本表示</li><li><code>&lt;mark&gt;</code> 表示被标记或突出显示以供参考或标记目的的文本。</li><li><code>&lt;time&gt;</code> 表示特定的时间。</li><li><code>&lt;date&gt;</code> 表示特定的日期。</li><li><code>&lt;dfn&gt;</code> 用于表示在定义短语或句子的上下文中定义的术语。</li><li><code>&lt;code&gt;</code> 计算机代码的简短片段的方式显示其内容的样式。</li><li><code>&lt;samp&gt;</code> 输出的示例或引用的内联文本或样本文本。</li><li><code>&lt;kbd&gt;</code> 表示文本是从键盘上键入的，它经常用在与计算机相关的文档或手册中。</li><li><code>&lt;del&gt;</code> 表示已从文档中删除的文本范围。</li><li><code>&lt;ins&gt;</code> 表示已添加到文档中的文本范围。</li><li><code>&lt;menu&gt;</code> 表示用户可以执行或激活的一组命令，例如上下文菜单等。</li><li><code>&lt;dialog&gt;</code> 表示对话框或其他交互式组件，例如检查器或子窗口。</li><li><code>&lt;summary&gt;</code> 元素为 <code>&lt;details&gt;</code>元素的显示框指定摘要，标题或图例。</li><li><code>&lt;details&gt;</code> 描述文档或文档某个部分的细节。</li><li><code>&lt;bdi&gt;</code>: 允许设置一段文本，使其脱离其父元素的文本方向设置。</li><li><code>&lt;progress&gt;</code>: 定义任何类型的任务的进度。</li><li><code>&lt;ruby&gt;</code>: 定义 <code>ruby</code>注释（中文注音或字符）。</li><li><code>&lt;rt&gt;</code>: 定义字符（中文注音或字符）的解释或发音。</li><li><code>&lt;rp&gt;</code>: 在 <code>ruby</code>注释中使用，定义不支持 <code>ruby</code>元素的浏览器所显示的内容。</li><li><code>&lt;wbr&gt;</code>: 规定在文本中的何处适合添加换行符。</li><li><code>&lt;meter&gt;</code>: 定义度量衡，仅用于已知最大和最小值的度量。</li></ul><p><strong>弃用的HTML元素</strong></p><blockquote><p>这些是旧的HTML元素，已弃用，不应继续使用。 不要在新项目中使用它们，应尽快在旧项目替换它们，即使它们现在依然可以使用。</p></blockquote><p><code>&lt;acronym&gt;</code>、<code>&lt;applet&gt;</code>、<code>&lt;basefont&gt;</code>、<code>&lt;bgsound&gt;</code>、<code>&lt;big&gt;</code>、<code>&lt;blink&gt;</code>、<code>&lt;center&gt;</code>、<code>&lt;command&gt;</code>、<code>&lt;content&gt;</code>、<code>&lt;dir&gt;</code>、<code>&lt;element&gt;</code>、<code>&lt;font&gt;</code>、<code>&lt;frame&gt;</code>、<code>&lt;frameset&gt;</code>、<code>&lt;image&gt;</code>、<code>&lt;isindex&gt;</code>、<code>&lt;keygen&gt;</code>、<code>&lt;listing&gt;</code>、<code>&lt;marquee&gt;</code>、<code>&lt;menuitem&gt;</code>、<code>&lt;multicol&gt;</code>、<code>&lt;nextid&gt;</code>、<code>&lt;nobr&gt;</code>、<code>&lt;noembed&gt;</code>、<code>&lt;noframes&gt;</code>、<code>&lt;plaintext&gt;</code>、<code>&lt;shadow&gt;</code>、<code>&lt;spacer&gt;</code>、<code>&lt;strike&gt;</code>、<code>&lt;tt&gt;</code>、<code>&lt;xmp&gt;</code>。</p><h2 id="替换元素的概念及计算规则" tabindex="-1">替换元素的概念及计算规则 <a class="header-anchor" href="#替换元素的概念及计算规则" aria-label="Permalink to &quot;替换元素的概念及计算规则&quot;">​</a></h2><p>替换元素（Replaced Element）是指在渲染过程中由外部资源决定其内容的元素。换句话说，替换元素的内容不受CSS样式的影响，而是由外部资源（如图像、视频、音频等）提供。</p><p>常见的替换元素包括 <code>&lt;img&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>、<code>&lt;object&gt;</code>、<code>&lt;iframe&gt;</code>等。</p><p>替换元素的计算规则如下：</p><ol><li><strong>内容计算</strong> ：替换元素的内容由其指定的外部资源提供，因此替换元素的内容不受CSS样式的影响。其内容通常是浏览器根据指定的资源进行解析和渲染。</li><li><strong>尺寸计算</strong> ：替换元素的尺寸由其内容决定，一般是根据外部资源的实际尺寸来确定。如果未指定尺寸，浏览器可能会根据资源的默认尺寸或其他规则进行计算。</li><li><strong>替换元素的默认样式</strong> ：浏览器会为替换元素提供一些默认的样式，以确保替换元素在没有外部资源或样式的情况下有合适的显示。不同浏览器的默认样式可能会有所不同。</li><li><strong>替换元素的替换规则</strong> ：如果指定的外部资源无法加载或解析，浏览器会根据替换规则来选择替代内容进行显示。例如，对于无法加载的图像，浏览器可能会显示替代文本或占位符图像。</li></ol><p>需要注意的是，替换元素是通过外部资源提供内容的，因此无法通过CSS样式来直接修改其内容。但可以通过一些特定的属性或样式来控制替换元素的显示方式，比如指定外部资源的URL、设置尺寸、设置媒体播放控制等。</p><p>总而言之，替换元素在渲染过程中不受CSS样式的影响，其内容由外部资源提供，而尺寸和默认样式等特性会根据外部资源的实际情况进行计算和显示。</p><p><strong>替换元素类型分类</strong></p><p>替换元素可以根据其内容的类型进行分类。以下是替换元素的主要分类：</p><ol><li><strong>图像替换元素（Image Replaced Elements）</strong> ：包括 <code>&lt;img&gt;</code>元素，用于在页面上显示图像。图像元素的内容由 <code>src</code>属性指定的外部图像资源提供。</li><li><strong>多媒体替换元素（Media Replaced Elements）</strong> ：包括 <code>&lt;video&gt;</code>、<code>&lt;audio&gt;</code>等元素，用于在页面上显示视频和音频。这些元素的内容由指定的外部媒体资源提供。</li><li><strong>表单替换元素（Form Replaced Elements）</strong> ：包括 <code>&lt;input type=&quot;file&quot;&gt;</code>、<code>&lt;input type=&quot;checkbox&quot;&gt;</code>等元素，用于创建表单元素，其外观和交互方式由浏览器自身决定。</li><li><strong>框架替换元素（Frame Replaced Elements）</strong> ：包括 <code>&lt;iframe&gt;</code>、<code>&lt;object&gt;</code>等元素，用于在页面中嵌入其他文档或多媒体内容。这些元素的内容由指定的外部资源提供。</li><li><strong>字体替换元素（Font Replaced Elements）</strong> ：包括使用 <code>@font-face</code>定义的自定义字体元素，如 <code>&lt;span&gt;</code>、<code>&lt;h1&gt;</code>等。这些元素的字体样式由指定的字体资源提供。</li></ol><p>需要注意的是，并非所有具有外部资源的元素都被视为替换元素。例如，<code>&lt;div&gt;</code>、<code>&lt;span&gt;</code>等元素不是替换元素，因为它们的内容由其内部文本或其他嵌套元素提供，而不依赖于外部资源。</p><p>替换元素的分类有助于理解其特性和渲染行为，以便正确使用和控制这些元素，并在需要时为其指定合适的属性和样式。</p><p><strong>替换元素的尺寸从内而外分类</strong></p><ol><li><strong>内部尺寸（Intrinsic Dimensions</strong> ）：内部尺寸是指替换元素内容自身固有的尺寸。对于图像替换元素，内部尺寸是指图像的实际宽度和高度。对于视频、音频等多媒体替换元素，内部尺寸是指媒体资源的实际宽度和高度。内部尺寸由替换元素的内容决定，不受CSS样式的影响。</li><li><strong>指定尺寸（Specified Dimensions）</strong> ：指定尺寸是指通过CSS样式或属性显式指定给替换元素的宽度和高度。通过设置 <code>width</code>和 <code>height</code>属性，可以手动指定替换元素的尺寸。指定尺寸会覆盖替换元素的内部尺寸，因此可以通过CSS样式来控制替换元素的显示大小。</li><li><strong>计算尺寸（Computed Dimensions）</strong> ：计算尺寸是指最终在文档中实际渲染时的尺寸。计算尺寸是根据内部尺寸和指定尺寸进行计算得到的结果。当内部尺寸和指定尺寸都存在时，浏览器会根据一定的规则（如保持纵横比、限制最大宽度或最大高度等）来计算最终的替换元素尺寸。</li></ol><p>需要注意的是，替换元素的尺寸计算规则可能因具体的替换元素类型和浏览器的实现而有所不同。一些替换元素可能具有固定的宽高比，而其他替换元素可能根据可用空间自动调整尺寸。在使用替换元素时，可以通过指定尺寸或者使用适当的CSS样式来控制其显示大小。</p><p>综上所述，替换元素的尺寸可以从内部尺寸、指定尺寸和计算尺寸进行分类，并根据实际需求来设置和控制替换元素的尺寸。</p><h2 id="对-csssprites-的理解" tabindex="-1">对 CSSSprites 的理解 <a class="header-anchor" href="#对-csssprites-的理解" aria-label="Permalink to &quot;对 CSSSprites 的理解&quot;">​</a></h2><p>CSSSprites（精灵图），将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。</p><p><strong>优点：</strong></p><ul><li>利用 <code>CSS Sprites</code>能很好地减少网页的http请求，从而大大提高了页面的性能，这是 <code>CSS Sprites</code>最大的优点；</li><li><code>CSS Sprites</code>能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。</li></ul><p><strong>缺点：</strong></p><ul><li>在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；</li><li><code>CSSSprites</code>在开发的时候相对来说有点麻烦，需要借助 <code>photoshop</code>或其他工具来对每个背景单元测量其准确的位置。</li><li>维护方面：<code>CSS Sprites</code>在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的 <code>CSS</code>，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动 <code>CSS</code>。</li></ul><h2 id="bfc" tabindex="-1">BFC <a class="header-anchor" href="#bfc" aria-label="Permalink to &quot;BFC&quot;">​</a></h2><p>先来看两个相关的概念：</p><ul><li>Box: Box 是 CSS 布局的对象和基本单位，⼀个⻚⾯是由很多个 Box 组成的，这个Box就是我们所说的盒模型。</li><li>Formatting context：块级上下⽂格式化，它是⻚⾯中的⼀块渲染区域，并且有⼀套渲染规则，它决定了其⼦元素将如何定位，以及和其他元素的关系和相互作⽤。</li></ul><p>块格式化上下文（Block Formatting Context，BFC）是Web页面的可视化CSS渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p><p>通俗来讲：BFC是一个独立的布局环境，可以理解为一个容器，在这个容器中按照一定规则进行物品摆放，并且不会影响其它环境中的物品。如果一个元素符合触发BFC的条件，则BFC中的元素布局不受外部影响。</p><p><strong>创建BFC的条件：</strong></p><ul><li>根元素：body；</li><li>元素设置浮动：float 除 none 以外的值；</li><li>元素设置绝对定位：position (absolute、fixed)；</li><li>display 值为：inline-block、table-cell、table-caption、flex等；</li><li>overflow 值为：hidden、auto、scroll；</li></ul><p><strong>BFC的特点：</strong></p><ul><li>垂直方向上，自上而下排列，和文档流的排列方式一致。</li><li>在BFC中上下相邻的两个容器的margin会重叠</li><li>计算BFC的高度时，需要计算浮动元素的高度</li><li>BFC区域不会与浮动的容器发生重叠</li><li>BFC是独立的容器，容器内部元素不会影响外部元素</li><li>每个元素的左margin值和容器的左border相接触</li></ul><p><strong>BFC的作用：</strong></p><ul><li><strong>解决margin的重叠问题</strong> ：由于BFC是一个独立的区域，内部的元素和外部的元素互不影响，将两个元素变为两个BFC，就解决了margin重叠的问题。</li><li><strong>解决高度塌陷的问题</strong> ：在对子元素设置浮动后，父元素会发生高度塌陷，也就是父元素的高度变为0。解决这个问题，只需要把父元素变成一个BFC。常用的办法是给父元素设置 <code>overflow:hidden</code>。</li><li><strong>创建自适应两栏布局</strong> ：可以用来创建自适应两栏布局：左边的宽度固定，右边的宽度自适应。</li></ul><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.right</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">blue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">overflow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hidden</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class=&quot;left&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> class=&quot;right&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>左侧设置 <code>float:left</code>，右侧设置 <code>overflow: hidden</code>。这样右边就触发了BFC，BFC的区域不会与浮动元素发生重叠，所以两侧就不会发生重叠，实现了自适应两栏布局。</p><h2 id="margin重叠" tabindex="-1">margin重叠 <a class="header-anchor" href="#margin重叠" aria-label="Permalink to &quot;margin重叠&quot;">​</a></h2><p><strong>问题描述：</strong> 两个块级元素的上外边距和下外边距可能会合并（折叠）为一个外边距，其大小会取其中外边距值大的那个，这种行为就是外边距折叠。需要注意的是，<strong>浮动的元素和绝对定位</strong>这种脱离文档流的元素的外边距不会折叠。重叠只会出现在 <strong>垂直方向</strong> 。</p><p><strong>计算原则：</strong></p><p>折叠合并后外边距的计算原则如下：</p><ul><li>如果两者都是正数，那么就去最大者</li><li>如果是一正一负，就会正值减去负值的绝对值</li><li>两个都是负值时，用0减去两个中绝对值大的那个</li></ul><p><strong>解决办法：</strong></p><p>对于折叠的情况，主要有两种：<strong>兄弟之间重叠</strong>和<strong>父子之间重叠</strong></p><p>（1）兄弟之间重叠</p><ul><li>底部元素变为行内盒子：<code>display: inline-block</code></li><li>底部元素设置浮动：<code>float</code></li><li>底部元素的position的值为 <code>absolute/fixed</code></li></ul><p>（2）父子之间重叠</p><ul><li>父元素加入：<code>overflow: hidden</code></li><li>父元素添加透明边框：<code>border:1px solid transparent</code></li><li>子元素变为行内盒子：<code>display: inline-block</code></li><li>子元素加入浮动属性或定位</li></ul>`,58),d=[s];function c(a,n,g,p,r,h){return l(),t("div",null,d)}const u=i(o,[["render",c]]);export{E as __pageData,u as default};
